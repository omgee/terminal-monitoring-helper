// Generated by CoffeeScript 2.3.0
(function() {
  var App;

  App = (function() {
    class App {
      static init() {
        this.copyButton.addEventListener('click', this.copy);
        this.clearButton.addEventListener('click', this.clear);
        this.ticketEdit.addEventListener('keyup', this.editListener);
      }

      static copy() {
        App.ticketDone.select();
        document.execCommand('copy');
      }

      static clear() {
        App.ticketEdit.value = '';
        App.ticketDone.value = '';
      }

      static changeStatus(element) {
        console.log(element);
        this.autoStatus.classList.remove('active');
        this.manualStatus.classList.remove('active');
        element.classList.add('active');
      }

      static manualMode(value) {
        var am, amount, comment, da, date, dateObj, dates, genDate, number, operator, terminal;
        dateObj = new Date();
        [terminal, date, amount, number, operator, comment] = value.split("\n");
        terminal = terminal.split(' ').join(' / ');
        if (number === void 0) {
          number = '';
        }
        if (operator === void 0) {
          operator = '';
        }
        if (amount === void 0) {
          amount = '';
        }
        number = number.split(' ').join(' / ');
        operator = operator.split(' ').join(' / ');
        if (amount === void 0) {
          amount = '';
        }
        amount = (function() {
          var i, len, ref, results;
          ref = amount.split(' ');
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            am = ref[i];
            results.push(`${am}.00`);
          }
          return results;
        })();
        amount = amount.join(' / ');
        if (date === void 0) {
          date = '';
        }
        genDate = function(date) {
          var getDate, getFullYear, getMonth;
          getDate = dateObj.getDate();
          getMonth = dateObj.getMonth() + 1;
          getFullYear = dateObj.getFullYear();
          if (getDate < 10) {
            getDate = `0${getDate}`;
          }
          if (getMonth < 10) {
            getMonth = `0${getMonth}`;
          }
          if (date.indexOf('.') === -1) {
            return date = `${getDate}.${getMonth}.${getFullYear} ${date}`;
          } else {
            return date;
          }
        };
        dates = (function() {
          var i, len, ref, results;
          ref = date.split(' ');
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            da = ref[i];
            results.push(genDate(da));
          }
          return results;
        })();
        dates = dates.join(' / ');
        this.ticketDone.value = this.genTicket(terminal, dates, amount, number, operator, comment, -1, -1);
      }

      static autoMode(value) {
        var amount, date, error, i, len, number, numberPattern, operator, ref, status, terminal, val, valuesArray;
        Array.prototype.unique = function() {
          var i, key, output, ref, results;
          output = {};
          for (key = i = 0, ref = this.length; (0 <= ref ? i < ref : i > ref); key = 0 <= ref ? ++i : --i) {
            output[this[key]] = this[key];
          }
          results = [];
          for (key in output) {
            value = output[key];
            results.push(value);
          }
          return results;
        };
        terminal = [];
        date = [];
        amount = [];
        number = [];
        numberPattern = /\d{6,}/;
        operator = [];
        error = '';
        status = '';
        ref = value.split("\n");
        for (i = 0, len = ref.length; i < len; i++) {
          val = ref[i];
          valuesArray = val.split(';');
          terminal.push(valuesArray[1]);
          date.push(valuesArray[2]);
          amount.push(valuesArray[6] + '.00');
          number.push(valuesArray[4].match(numberPattern));
          operator.push(valuesArray[5]);
          status = valuesArray[9];
          error = valuesArray[10];
        }
        terminal.unique();
        date.unique();
        number.unique();
        operator.unique();
        terminal = terminal.join(' / ');
        date = date.join(' / ');
        amount = amount.join(' / ');
        number = number.join(' / ');
        operator = operator.join(' / ');
        this.ticketDone.value = this.genTicket(terminal, date, amount, number, operator, '', status, error);
      }

      static getStatus(val) {
        var i, len, ref, status;
        ref = this.statuses;
        for (i = 0, len = ref.length; i < len; i++) {
          status = ref[i];
          if (status.indexOf(`Статус=${val}`) !== -1) {
            return status;
          }
        }
        return '';
      }

      static getError(val) {
        var error, i, len, ref;
        ref = this.errors;
        for (i = 0, len = ref.length; i < len; i++) {
          error = ref[i];
          if (error.indexOf(`Ошибка=${val}`) !== -1) {
            return error;
          }
        }
        return '';
      }

      static editListener() {
        var value;
        value = App.ticketEdit.value;
        if (value.indexOf(';') !== -1) {
          App.changeStatus(App.autoStatus);
          App.autoMode(value);
        } else {
          App.changeStatus(App.manualStatus);
          App.manualMode(value);
        }
      }

      static genTicket(terminal = '', date = '', amount = '', number = '', operator = '', comment = '', status, error) {
        status = this.getStatus(status);
        error = this.getError(error);
        return `Терминал: ${terminal}\nДата/время: ${date}\nСумма: ${amount}\nНомер счета/телефона: ${number}\nВерный номер счета/телефона:\nСервис/Оператор: ${operator}\nВерный Сервис/Оператор:\nКомментарий: ${comment}\n${status}\n${error}`;
      }

    };

    App.ticketEdit = document.querySelector('#ticketEdit');

    App.ticketDone = document.querySelector('#ticketDone');

    App.copyButton = document.querySelector('#copyButton');

    App.clearButton = document.querySelector('#clearButton');

    App.autoStatus = document.querySelector('#autoStatus');

    App.manualStatus = document.querySelector('#manualStatus');

    App.statuses = ['Статус=0 (Ожидание проведения)', 'Статус=7 (Платеж завершен)', 'Статус=1 (Платеж проводится)', 'Статус=100 (Платеж не проведен)', 'Статус=108 (Платеж проведен вручную)', 'Статус=120 (Платеж заблокирован при обработке)', 'Статус=112 (Платеж проведен оффлайн)', 'Статус=102 (Платеж отменен вручную)'];

    App.errors = ['Ошибка=3003 (Превышен дневной лимит)', 'Ошибка=1200200 (Откат транзакции)', 'Ошибка=1220110 (Оплата в пользу сервис-провайдера невозможна)', 'Ошибка=1220140 (Ошибочный номер абонента)', 'Ошибка=1220117 (Недостаточно средств на счету дилера для проведения этого платежа)', 'Ошибка=1200002 (Состояние платежа неизвестно, сбой при осуществлении платежа в биллинг провайдера (в последствии состояние будет изменено на проведен или на один из откатов))', 'Ошибка=53 (Точка заблокирована)', 'Ошибка=1200200 (Откат транзакции)'];

    return App;

  }).call(this);

  App.init();

}).call(this);

//# sourceMappingURL=core.js.map
